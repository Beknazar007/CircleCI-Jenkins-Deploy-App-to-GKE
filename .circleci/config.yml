
version: 2.1

orbs:
  ruby: circleci/ruby@1.0
  node: circleci/node@2
  aws-cli: afrase/aws-cli@0.0.2
  core: afrase/core@0.0.3

executors:
  ruby:
    working_directory: &working-directory ~/project
    docker:
      - image: &ruby-image cimg/ruby:2.6-node
    environment: &executor-environment
      RAILS_ENV: test
  stack:
    working_directory: *working-directory
    docker:
      - image: *ruby-image
    environment: *executor-environment

commands:
  eb-config:
    steps:
      - aws-cli/install
      - aws-cli/configure:
          configure-default-region: false
      - core/install-eb-cli
  adding_key:
    steps:
      - run: |
          sudo -i
          curl -s https://raw.githubusercontent.com/envkey/envkey-source/master/install.sh | bash          eval $(envkey-source) \
          && bundle install --jobs $(nproc) --retry=3
          


jobs:
  run-rubocop:
    executor: ruby
    steps: 
      - adding_key
      - core/checkout-repo
      - ruby/install-deps
      - run:
          name: Running rubocop
          command: bundle exec rubocop --parallel --config .rubocop.yml

  run-rspec:
    executor: stack
    parallelism: 2
    steps:
      - core/checkout-repo
      - ruby/install-deps
      # - yarn-install
      # - ruby-custom/rspec

  build:
    docker:
      - image: cimg/ruby:2.6-node
    steps:
      - checkout
      - ruby/install-deps
      # Store bundle cache
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"

  compile-qa:
    docker:
      - image: cimg/ruby:2.6-node
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"
      # Note to future self: couldn't cache based on the manifest alone because it's generated on compiling
      # We need a way to determine if the contents of /packs/*/* has changed, but we don't have a way to yet.
      # - restore_cache:
      #     # key: compiled-assets-v1-{{ checksum "public/packs/manifest.json" }}
      #     key: compiled-assets-v1-{{ .Branch }}-{{ .Revision }}
      - run:
          command: RAILS_ENV=staging NODE_ENV=production bundle exec rails webpacker:compile
          name: Compiling webpacker assets
          no_output_timeout: 30m
      - run:
          command: ls public/packs
          name: Verify packs created by CI
      - save_cache:
          # key: compiled-assets-v1-{{ .Environment.CIRCLE_TAG }}
          # key: compiled-assets-v1-{{ checksum "public/packs/manifest.json" }}
          key: compiled-assets-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - public/packs

  compile-prod:
    docker:
      - image: cimg/ruby:2.6-node
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"
      # Note to future self: couldn't cache based on the manifest alone because it's generated on compiling
      # We need a way to determine if the contents of /packs/*/* has changed, but we don't have a way to yet.
      - restore_cache:
          # key: compiled-assets-v1-{{ checksum "public/packs/manifest.json" }}
          key: compiled-assets-v1-{{ .Branch }}-{{ .Revision }}
      - run:
          command: RAILS_ENV=production NODE_ENV=production bundle exec rails assets:precompile
          name: Compiling webpacker assets
      - save_cache:
          # key: compiled-assets-v1-{{ checksum "public/packs/manifest.json" }}
          key: compiled-assets-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - public/packs

  test:
    parallelism: 3
    docker:
      - image: cimg/ruby:2.7-node
      - image: circleci/postgres:9.5-alpine
        environment:
          POSTGRES_USER: circleci-demo-ruby
          POSTGRES_DB: rails_blog_test
          POSTGRES_PASSWORD: ""
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      PGHOST: 127.0.0.1
      PGUSER: circleci-demo-ruby
      PGPASSWORD: ""
      RAILS_ENV: test
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace
      # Run rspec in parallel
      - ruby/rspec-test
  deploy-qa:
    executor: aws-cli/default
    steps:
      - checkout
      - eb-config
      - run:
          name: Install QA ElasticBeanstalk profile
          command: |
            mkdir -p ~/project/.elasticbeanstalk
            cp ~/project/.circleci/eb.us-east-2.config.yml  ~/project/.elasticbeanstalk/config.yml
      - restore_cache:
          key: compiled-assets-v1-{{ checksum "public/packs/manifest.json" }}
          # key: compiled-assets-v1-{{ .Branch }}-{{ .Revision }}
      - run:
          command: eb deploy qa-shared-scrub-cop-red --region us-east-2 --label "${CIRCLE_TAG}" --timeout 30 --staged
          name: Deploy to QA
          no_output_timeout: 30m
  deploy-prod:
    executor: aws-cli/default
    steps:
      - checkout
      - eb-config
      - run:
          name: Install Production ElasticBeanstalk profile
          command: |
            mkdir -p ~/project/.elasticbeanstalk
            cp ~/project/.circleci/eb.us-east-1.config.yml  ~/project/.elasticbeanstalk/config.yml
      - restore_cache:
          # key: compiled-assets-v1-{{ checksum "public/packs/manifest.json" }}
          key: compiled-assets-v1-{{ .Branch }}-{{ .Revision }}
      - run:
          command: eb deploy scrub-cop-blue --region us-east-1 --label "${CIRCLE_TAG}" --timeout 45 --staged
          name: Deploy to Production
          no_output_timeout: 45m


workflows:
  version: 2
  build_deploy:
    jobs:
      - run-rubocop:
          filters:
            tags:
              only: /.*/
      - run-rspec:
          filters:
            tags:
              only: /.*/
      - build:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - compile-qa:
          requires:
            - build
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)+-rc[0-9]+/ # only run against v0.0.0-rc0 tags
            branches:
              ignore: /.*/ # don't run for any branches
      - compile-prod:
          requires:
            - build
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)+/ # only run against v0.0.0 tags
            branches:
              ignore: /.*/ # don't run for any branches
      - deploy-qa:
          requires:
            - compile-qa
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)+-rc[0-9]+/ # only run against v0.0.0-rc0 tags
            branches:
              ignore: /.*/ # don't run for any branches
      - deploy-prod:
          requires:
            - compile-prod
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)+/ # only run against v0.0.0 tags
            branches:
              ignore: /.*/ # don't run for any branches


      # - test:
      #     requires:
      #       - build